#!/usr/bin/env python3
# pylint: disable=consider-using-f-string
# pylint: disable=invalid-name
# pylint: disable=missing-function-docstring
# pylint: disable=missing-module-docstring

import subprocess
import sys
from argparse import ArgumentParser

parser = ArgumentParser()
parser.add_argument("-e", "--exclude", default=[], action="append")
parser.add_argument("command", nargs="+")


def main(args):
    errors = 0
    for db in databases_for_backup(exclude=args.exclude):
        try:
            backup(db, command=args.command)
        except Exception as e:
            say("Could not back up database %s due to %r: %s" % (db, e, e))
            errors += 1
    if errors:
        return 1
    return 0


def databases_for_backup(*, exclude):
    exclude = set(v.casefold() for v in exclude)
    exclude |= {"information_schema", "performance_schema", "sys"}
    return (db for db in all_databases() if db.casefold() not in exclude)


def all_databases():
    return subprocess.check_output(
        ["mysql", "-Ne", "SHOW DATABASES"],
        input="",
        encoding="utf-8",
    ).splitlines()


def backup(db, *, command):
    say("+ %s" % db)
    with subprocess.Popen(
        [
            "mysqldump",
            "--single-transaction",
            "--routines",
            "--events",
            "--no-autocommit",
            "--max-allowed-packet=512M",
            db,
        ],
        stdin=subprocess.DEVNULL,
        stdout=subprocess.PIPE,
    ) as mysqldump:
        subprocess.run(
            interpolate_command(db, command),
            stdin=mysqldump.stdout,
            check=True,
            timeout=3600,
        )
    try:
        mysqldump.wait(timeout=10)
    except:
        mysqldump.terminate()
        raise
    if mysqldump.returncode:
        raise RuntimeError("mysqldump failed with status %d" % mysqldump.returncode)


def interpolate_command(db, command):
    return [v.replace("{}", db) for v in command]


def say(message):
    print(message, file=sys.stderr)
    sys.stderr.flush()


if __name__ == "__main__":
    sys.exit(main(parser.parse_args()))
